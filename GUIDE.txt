---------------------------------------------------------------------------------
|This GUIDE gives you the steps to build a simple web application using Laravel.|
---------------------------------------------------------------------------------

1. Install composer, Node.js and Xampp.
2. Create a new laravel project:
    composer create-project laravel/laravel <name>>

If you don't want to install a software for localhost. Laravel has a tool to
develop your local server:

1. Move in your Laravel project file:
    cd <your_project>

2. Use the next command:
    php -S  localhost:8000 -t public/
                or
    php -S <your server> -t public/

--------------------------------- Creating MVC --------------------------
1. Use the next command:
    php artisan make:model task -mcr

The new TABLE was created in migration folder.
MODEL was create in /app/Models/.
CONTROLLER was created in /app/http/Controllers/.

If you need yo check more information about the type of value, check:
https://laravel.com/docs/10.x/migrations#column-method-string

------------------------- tables -------------------------------------
In database/migrationd/2024_02_01_224918_create_tasks_table.php

1. In up function, you can add your new db tables:

    e.p.,
    Schema::create('tasks', function (Blueprint $table) {
        $table->id();
        $table->string("task");
        $table->timestamps();
    });

----------------------- config .env -----------------------
1. Access to .env file
2. Found DB_DATABASE=laravel and modifies with:
    DB_DATABASE=<name of your project>

------------------------- migration ---------------------------------
This part functions when we want to work whith our db and we want to create new tables.
It's to say, we always will work with this folder if we modify anything of the db.

1. /database/migration/
2. In the terminal, type:
    php artisan migrate
With this, we'll go to migrate all our tables directly to the db.

------------------------------ views folder --------------------------
You can found it inside of /resources/views/
It's all the code you can show in the design

There're a specific folder where you'll be able to move the main design that the users will see.
    /resources/routes/web.php

To create a new view, you need to name that file as <name>.blade.php

---------------------------------- routes -----------------------------
In /resources/routes/web.php

REMEMBER:
    You can code in web.php the route you need the users see.
    But, as a good practice, you have to call the controller and conect it with web.php
    for displaying your site.

(After you can check this)

--------------------------- sending and receiving data -------------------------
1. In the index.blade.php or the file that you added before as a view, add a form:
    
    <form action="{{ url('/') }}" method="post">

        @csrf //Security key from Laravel
        <input type="text" name="task" id="task">
        <input type="submit" value="Agregar tarea">

    </form>

---------------------------- access to controller ---------------------------
In web.blade.php, for calling a controller:

1. Export the controller route:
    use App\Http\Controllers\TaskController;

2. Now, you can call the TaskController using its methods:
    Route::get('/',[TaskController::class,'index']);

3. In TaskController, inside of index function:
    public function index()
    {
        return view('task.index');
    }

--------------------------- Post method in controller ---------------------
Similar like get method, in web.php, just copy the get route and modify it:

1. information will be received in the store function:

    Route::post('/',[TaskController::class,'store']);

2. In the controller, just we will code a print_r for checking what's happening:
    
    public function store(Request $request)
    {
        print_r($_POST);
    }

(NOTE: For displaying data, you have to use php -S  localhost:8000 -t public/ command)

------------------------ Access model to DB --------------------------------
We'll use the model /app/Models/.
Here we go to use all the fields to save data.

1. Code the next insido the class:
    class task extends Model
    {
        use HasFactory;
        protected $fillable=[
            'task'
        ];
    }

It allows to interact with the db.

2. Export the Model:
    use App\Models\task;

3. In the controller, inside store function, add:
    $task=request()->all();
    Task::create($task);

Where request() is used to receive the data from the form.
And Task::create($task) saves the data into the database.

4. Return:
    return redirect('/');
